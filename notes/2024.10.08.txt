Let's continue from last time.
I was in the middle of implementing
    onWordSetChanged()
Now I tested that the retrieved wordSetId is correct.
So now what to do with that wordSetId?
Use the new Database API, to get word set's words as Word objects instead of int IDs
    database.getWordsFromWordSet(wordSetId)
Now we will need to update words list widget with this new words list.
We currently do this same logic in createWordsListWidget() but with all words from database.
So I need to refactor this logic of updating list widget with a new list of words,
and use it both in createWordsListWidget() and in onWordSetChanged().
Let's create a new function
    void updateWordsListWidget(const std::vector<Word>& words)
that updates the contents of words list widget with a given list of words.
Use that function in createWordsListWidget().
And finally use it in onWordSetChanged() to update words list widget with the words from set.
That's it.
It works.

DONE: Show global word set

Let's implement the global word set.
There are 2 options here.
1. Global word set will exist in database just as any other word set,
   but it will be created internally by Database itself, not loaded from file.
2. Global word set will NOT exist in database, but only shown in UI.
I think the first approach is better. Second one might be easier for now,
but first one will solve many annoying issues in the future when it gets more complicated.

So let's create a global set in Database.
Done.
I think it will look better in UI if instead of "global" it's written as "*".
Let's do that.
Done.
It works, and looks good.
